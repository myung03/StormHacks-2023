## Introduction

Welcome to Lecture 23 of COMM 205: Introduction to Management Information Systems. In this lecture, we will continue discussing merging datasets, focusing on two kinds of methods: **inner_join()** and **left_join()**. We will also discuss how to handle non-one-to-one matching situations.

<?!>## Merging Datasets

Merging datasets is the process of combining two or more datasets into a single dataset. In this course, we will cover two kinds of methods to merge datasets: **inner_join()** and **left_join()**. 

<?!>### inner_join()

**inner_join()** allows us to match observations from two datasets based on matching values in a particular attribute(s). When merging two datasets, the variable names of the attribute(s) in both datasets should be the same to use the default syntax. It is also recommended that the variable type of the key variable(s) in both datasets also be the same.

<?!>### left_join()

**left_join()** returns all rows from the left dataset, and all columns from both datasets. This method is suitable when you want to keep all the observations in the left dataset and bring new information for the matching observations in the right dataset.

<?!>## Using left_join()

Let's use an example to illustrate how to use **left_join()**. Suppose we have two datasets: **example1** and **example2**. We want to improve the **example1** dataset by bringing as much information from the **example2** dataset as we can. To do this, we will use **left_join()**. 

```merged2 <- left_join(example1, example2)```

R will return "Joining, by = c('gvkey', 'fyear')". For matching values of the joining attribute – in this case, the combination of gvkey and fyear – **left_join()** links the information appearing in both datasets. Those observations in the left dataset which do not have matching observations in the right dataset will be retained in the resultant merged dataset, while those observations in the right dataset which do not have matching observations in the left dataset will not be retained in the resultant dataset.

<?!>## Non-One-to-One Matching

When you merge two datasets whose key variable(s) uniquely identify each observation within the dataset, this kind of merge is called a one-to-one merge. However, the attribute(s) used as a basis of matching the observations in two data sets do not have to be key variables for both datasets. In such situations, an observation in one dataset can match with multiple observations in the other dataset through non-one-to-one matching. However, the variable or variable(s) to perform the merge should uniquely identify at least one of the datasets.

<?!>### Example

Let's use an example to illustrate non-one-to-one matching. Suppose we have two datasets: **example3** and **NAICS_2_6_digit_codes**. We want to merge the two datasets, so that each observation will have the following variables: gvkey, fyear, naicsh, and NAICS_description. This will attempt to add the industry description to every observation in the **example3** dataset.

```merged3 <- left_join(example3, NAICS_2_6_digit_codes, by = c("naicsh" = "NAICS"))```

<?!>## Conclusion

In this lecture, we learned how to use **left_join()** to merge datasets and how to handle non-one-to-one matching situations. We hope you found this lecture helpful and informative.
