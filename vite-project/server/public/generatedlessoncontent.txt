## Introduction

In this lesson, we will cover the topic of merging datasets in Python. Specifically, we will cover two methods of merging datasets: `inner_join()` and `left_join()`. Merging datasets allows us to match observations from two datasets based on matching values in a particular attribute(s). It is important to note that when merging two datasets, the variable names of the attribute(s) in both datasets should be the same to use the default syntax. Additionally, it is recommended that the variable type of the key variable(s) in both datasets also be the same.

<?!>## `left_join()` Function

The `left_join()` function returns all rows from the first dataset and all columns from both datasets. This function is suitable when you want to keep all the observations in the first dataset and bring new information for the matching observations in the second dataset.

To use the `left_join()` function, we will use the same example datasets from before: `example1` and `example2`. Suppose this time we want to improve the `example1` dataset by bringing in as much information from the `example2` dataset as possible. 

To do this, we will enter the following code into the Console: 

```python
merged2 <- left_join(example1, example2)
```

Here, R will return "Joining, by = c("gvkey", "fyear")". For matching values of the joining attribute (in this case, the combination of gvkey and fyear), `left_join()` links the information appearing in both datasets. Those observations in the “left” dataset which do not have matching observations in the other dataset will be retained in the resultant merged dataset, while those observations in the “right” dataset which do not have matching observations in the other dataset will not be retained in the resultant dataset.

<?!>## Non-One-to-One Matching

When you merge two datasets whose key variable(s) uniquely identify each observation within the dataset, this kind of merge is called a one-to-one merge. However, the attribute(s) used as a basis of matching the observations in two datasets do not have to be key variables for both datasets. In such situations, an observation in one dataset can match with multiple observations in the other dataset through non-one-to-one matching. 

Suppose we have two datasets: `example3` and `NAICS_2_6_digit_codes`. `example3` contains gvkey, fyear, and industry code (naicsh) of all observations in fyear==2016. `NAICS_2_6_digit_codes` contains the NAICS code and industry description for more than 2,200 industries (from the 2 to the 6 digit level). 

We want to merge the two datasets so that each observation will have the following variables: gvkey, fyear, naicsh, and NAICS_description. This will attempt to add the industry description to every observation in the `example3` dataset.

To do this, we will enter the following code into the Console:

```python
merged3 <- left_join(example3, NAICS_2_6_digit_codes, by = c("naicsh" = "NAICS"))
```

This will merge the two datasets so that each observation has the desired variables. 

<?!>## Conclusion

In this lesson, we covered the topic of merging datasets in Python. We discussed two methods of merging datasets: `inner_join()` and `left_join()`. We also discussed the importance of having the same variable names and types when merging datasets. Lastly, we covered non-one-to-one matching and how to handle it when merging datasets.
