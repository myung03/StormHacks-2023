## Introduction to Merging Datasets

In data analysis, merging data is an essential task that involves combining two or more datasets into one. Merging datasets is necessary when you want to perform analysis on multiple datasets that share a common variable. In this lesson, we will learn about two methods of merging datasets: `inner_join()` and `left_join()`. We will also look at examples of how to merge datasets using R.

<?!>## The Two Methods of Merging Datasets

There are two primary methods of merging datasets in R: `inner_join()` and `left_join()`. These methods allow us to match observations from two datasets based on matching values in a particular attribute(s).

<?!>### 1. inner_join()

`inner_join()` is a method that returns only the rows that have matching values in both datasets. In other words, it returns the intersection of the two datasets. 

<?!>### 2. left_join()

`left_join()` is a method that returns all rows from the left dataset and all columns from both datasets. It is suitable for when you want to keep all observations in the left dataset and bring new information for the matching observations in the right dataset.

<?!>## Important Considerations When Merging Datasets

When merging two datasets, it is essential to consider the following:

1. The variable names of the attribute(s) in both datasets should be the same to use the default syntax.
2. The variable type of the key variable(s) in both datasets should also be the same.
3. The attribute(s) used as the basis of matching the observations in two datasets do not have to be key variables for both datasets.

<?!>## Merging Datasets in R

Let's look at examples of how to merge datasets in R using the `left_join()` function.

<?!>### Merging Datasets with One-to-One Matching

When you merge two datasets whose key variable(s) uniquely identify each observation within the dataset, this kind of merge is called a one-to-one merge. 

Suppose you have two datasets, `example1` and `example2`. You want to improve the `example1` dataset by bringing as much information from the `example2` as you can. Thus, you want to keep all the observations in the `example1` dataset and bring new information for the matching observations in the `example2` dataset.

To do this, enter the following command into the Console:

```R
merged2 <- left_join(example1, example2)
```

For matching values of the joining attribute – in this case, the combination of `gvkey` and `fyear`, `left_join()` links the information appearing in both datasets. Those observations in the “left” dataset which do not have matching observations in the other dataset will be retained in the resultant merged dataset, while those observations in the “right” dataset which do not have matching observations in the other dataset will not be retained in the resultant dataset.

<?!>### Merging Datasets with Non-One-to-One Matching

When the attribute(s) used as the basis of matching the observations in two datasets do not uniquely identify each observation within the dataset, this kind of merge is called a non-one-to-one merge.

Suppose you have two datasets, `example3` and `NAICS_2_6_digit_codes.rds`. You want to merge the two datasets, so that each observation will have the following variables: `gvkey`, `fyear`, `naicsh`, and `NAICS_description`. This will attempt to add the industry description to every observation in the `example3` dataset.

To do this, enter the following command into the Console:

```R
merged3 <- left_join(example3, NAICS_2_6_digit_codes, by = c("naicsh" = "NAICS"))
```

The resultant merged dataset will contain all rows from the `example3` dataset and all columns from both datasets.
