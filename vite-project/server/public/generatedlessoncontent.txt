## Introduction

In this lecture, we will cover the topic of merging datasets. We will explore two methods to merge datasets: `inner_join()` and `left_join()`. Merging datasets allows us to match observations from two datasets based on matching values in a particular attribute(s). We will also discuss non-one-to-one matching and how to merge datasets using this method.

<?!>## Merging Datasets

Merging datasets is a common task in data analysis. It allows us to combine data from multiple sources and analyze it together. In this course, we will cover two methods to merge datasets: `inner_join()` and `left_join()`. 

<?!>### `inner_join()`

`inner_join()` returns only the rows that have matching values in both datasets. It is suitable when we want to extract only the observations that appear in both datasets. 

<?!>### `left_join()`

`left_join()` returns all rows from the left dataset and all columns from both datasets. It is suitable when we want to keep all the observations in the left dataset and bring new information for the matching observations in the right dataset.

<?!>## Syntax for Merging Datasets

When merging two datasets, the variable names of the attribute(s) in both datasets should be the same to use the default syntax. It is also recommended that the variable type of the key variable(s) in both datasets be the same.

<?!>## Merging Datasets Using `left_join()`

Suppose we have two datasets, example1 and example2. We want to improve the example1 dataset by bringing as much information from the example2 as we can. Thus, we want to keep all the observations in the example1 dataset and bring new information for the matching observations in the example2 dataset.

To do this, we can use the `left_join()` function. We can use the following code:

```
merged2 <- left_join(example1,example2)
```

R will return Joining, by = c("gvkey", "fyear"). For matching values of the joining attribute – in this case, the combination of gvkey and fyear, `left_join()` links the information appearing in both datasets. Those observations in the “left” dataset which do not have matching observations in the other dataset will be retained in the resultant merged dataset, while those observations in the “right” dataset which do not have matching observations in the other dataset will not be retained in the resultant dataset.

<?!>## Non-One-to-One Matching

When we merge two datasets whose key variable(s) uniquely identify each observation within the dataset, this kind of merge is called a one-to-one merge. However, the attribute(s) used as a basis of matching the observations in two datasets do not have to be key variables for both datasets. In such situations, an observation in one dataset can match with multiple observations in the other dataset through non-one-to-one matching. However, the variable or variable(s) to perform the merge should uniquely identify at least one of the datasets.

<?!>### Example of Non-One-to-One Matching

Suppose we have two datasets, example3 and NAICS_2_6_digit_codes. We want to merge the two datasets so that each observation will have the following variables: gvkey, fyear, naicsh, and NAICS_description. This will attempt to add the industry description to every observation in the Example3 dataset.

To do this, we can use the `left_join()` function. We can use the following code:

```
merged3 <- left_join(example3, NAICS_2_6_digit_codes, by = c("naicsh" = "NAICS"))
```

This will merge the two datasets based on the `naicsh` variable in the `example3` dataset and the `NAICS` variable in the `NAICS_2_6_digit_codes` dataset. The resultant dataset will contain all observations from `example3` and the matching observations from `NAICS_2_6_digit_codes`. 

<?!>## Conclusion

In conclusion, merging datasets is a powerful tool in data analysis and allows us to combine data from multiple sources. In this lecture, we covered two methods to merge datasets: `inner_join()` and `left_join()`. We also discussed non-one-to-one matching and how to merge datasets using this method.
