## Introduction

In this lecture, we will continue our discussion on merging datasets. Merging datasets is a process of combining two datasets based on common attributes. We will cover two types of methods to merge datasets: inner_join() and left_join(). Joining allows us to match observations from two datasets based on matching values in a particular attribute(s). When merging two datasets, the variable names of the attribute(s) in both datasets should be the same to use the default syntax. It is also recommended that the variable type of the key variable(s) in both datasets also be the same.

<?!>## left_join() Function

The left_join() function returns all rows from the first dataset, and all columns from both datasets. It is suitable for bringing new information for the matching observations in the second dataset into the first dataset, while keeping all observations in the first dataset. 

<?!>### Example

Suppose we have two datasets, example1 and example2. We want to improve the example1 dataset by bringing as much information from the example2 as we can. Thus, we want to keep all the observations in the example1 dataset and bring new information for the matching observations in the example2 dataset. To do this, we can use the left_join() function by entering the following code into the Console:

```
merged2 <- left_join(example1, example2)
```

R will return Joining, by = c("gvkey", "fyear"). For matching values of the joining attribute – in this case, the combination of gvkey and fyear, left_join() links the information appearing in both datasets. Those observations in the “left” dataset which do not have matching observations in the other dataset will be retained in the resultant merged dataset, while those observations in the “right” dataset which do not have matching observations in the other dataset will not be retained in the resultant dataset. 

<?!>### Non-One-to-One Matching

When you merge two datasets whose key variable(s) uniquely identify each observation within the dataset, this kind of merge is called a one-to-one merge. However, the attribute(s) used as a basis of matching the observations in two datasets do not have to be key variables for both datasets. In such situations, an observation in one dataset can match with multiple observations in the other datasets through non-one-to-one matching. However, the variable or variable(s) to perform the merge should uniquely identify at least one of the datasets.

<?!>### Example

Suppose we have two datasets, example3 and NAICS_2_6_digit_codes.rds. The example3 dataset contains gvkey, fyear, and industry code (naicsh) of all observations in fyear==2016. We can also create example3 quite easily:

```
example3 <- companies %>%
            filter(fyear==2016, !is.na(naicsh)) %>%
            select(gvkey, fyear, conm, naicsh)
```

This is a picture of example3. 

![Example3 Picture](https://i.imgur.com/9UzJk7L.png)

The NAICS_2_6_digit_codes.rds dataset contains the NAICS code and industry description for more than 2,200 industries (from the 2 to the 6 digit level). You want to merge the two datasets, so that each observation will have the following variables: gvkey, fyear, naicsh, and NAICS_description. This will attempt to add the industry description to every observation in the Example3 dataset. To do this, enter into the Console:

```
merged3 <- left_join(example3, NAICS_2_6_digit_codes, by = c("naicsh" = "NAICS"))
```

This will merge the two datasets based on the naicsh and NAICS variables. The resultant merged dataset will contain all the observations from example3 and the corresponding NAICS_description for each observation that matches.
