## Introduction
In this lecture, we will cover the topic of merging datasets using **inner_join()** and **left_join()** methods. Merging datasets allows us to match observations from two datasets based on matching values in a particular attribute(s). We will cover the differences between these two methods and how to use them in R. Additionally, we will discuss non-one-to-one matching and how to merge datasets that do not have key variables that uniquely identify each observation. 

<?!>## Inner Join Function
The **inner_join()** function is used to merge two datasets on a specific attribute(s). This function returns only the matching observations from both datasets based on the specified attribute(s). 

To use the **inner_join()** function, the variable names of the attribute(s) in both datasets should be the same. It is also recommended that the variable type of the key variable(s) in both datasets also be the same.

To perform an inner join, enter the following code into the console:

```R
merged_dataset <- inner_join(dataset1, dataset2, by = "attribute_name")
```

This code will merge dataset1 and dataset2 based on the attribute named "attribute_name" and create a new dataset named **merged_dataset**. 

<?!>## Left Join Function
The **left_join()** function is used to merge two datasets and keep all observations from the left dataset, while bringing in new information from the matching observations in the right dataset.

To use the **left_join()** function, enter the following code into the console:

```R
merged_dataset <- left_join(dataset1, dataset2, by = "attribute_name")
```

This code will merge dataset1 and dataset2 based on the attribute named "attribute_name" and create a new dataset named **merged_dataset**. The resulting dataset will contain all observations from dataset1 and all columns from both dataset1 and dataset2.

<?!>## Non-One-to-One Matching
Non-one-to-one matching occurs when two datasets are merged based on attributes that do not uniquely identify each observation within the dataset. In this situation, an observation in one dataset can match with multiple observations in the other dataset.

To perform a non-one-to-one merge, the variable or variable(s) used to perform the merge should uniquely identify at least one of the datasets.

To merge datasets with non-one-to-one matching, use the **left_join()** function and specify the attributes to merge on.

<?!>## Example
Suppose we have three datasets, example1, example2, and example3. We want to merge example1 and example2 using the **left_join()** function, and merge example3 with NAICS_2_6_digit_codes using the **left_join()** function.

To merge example1 and example2, enter the following code into the console:

```R
merged1 <- left_join(example1, example2, by = c("gvkey", "fyear"))
```

This code will merge example1 and example2 based on the attributes "gvkey" and "fyear", and create a new dataset named **merged1**.

To merge example3 with NAICS_2_6_digit_codes, enter the following code into the console:

```R
merged3 <- left_join(example3, NAICS_2_6_digit_codes, by = c("naicsh" = "NAICS"))
```

This code will merge example3 and NAICS_2_6_digit_codes based on the attributes "naicsh" and "NAICS", and create a new dataset named **merged3**.

<?!>## Conclusion
Merging datasets is a powerful tool that allows us to combine information from multiple sources. The **inner_join()** and **left_join()** functions are two methods for merging datasets in R. It is important to understand the differences between these two functions and how to use them appropriately. Additionally, non-one-to-one matching can be used to merge datasets that do not have key variables that uniquely identify each observation.
