## Introduction
In data analysis, merging datasets is a common task that allows us to combine information from multiple sources. In this course, we will cover two kinds of methods to merge datasets: `inner_join()` and `left_join()`. Joining allows us to match observations from two datasets based on matching values in a particular attribute(s). 

<?!>## Basic Merging with `left_join()`
When merging two datasets, the variable names of the attribute(s) in both datasets should be the same to use the default syntax. It is also recommended that the variable type of the key variable(s) in both datasets also be the same. 

`left_join(x, y)` returns all rows from `x`, and all columns from `x` and `y`. To demonstrate this, suppose you have two datasets `example1` and `example2`. You want to improve the `example1` dataset by bringing as much information from the `example2` as you can. Thus, you want to keep all the observations in the `example1` dataset and bring new information for the matching observations in the `example2` dataset. `left_join()` is suitable for this task. 

To perform this merge, enter the following code into the Console:
```R
merged2 <- left_join(example1, example2)
```
For matching values of the joining attribute – in this case, the combination of `gvkey` and `fyear` – `left_join()` links the information appearing in both datasets. Those observations in the “left” dataset which do not have matching observations in the other dataset will be retained in the resultant merged dataset, while those observations in the “right” dataset which do not have matching observations in the other dataset will not be retained in the resultant dataset.

<?!>## Non-One-to-One Matching
When you merge two datasets whose key variable(s) uniquely identify each observation within the dataset, this kind of merge is called a one-to-one merge. However, the attribute(s) (i.e., column(s)) used as a basis of matching the observations in two data sets do not have to be key variables for both datasets. In such situations, an observation in one dataset can match with multiple observations in the other datasets through non-one-to-one matching. However, the variable or variable(s) to perform the merge should uniquely identify at least one of the datasets.

To demonstrate this, suppose you have two datasets `example3` and `NAICS_2_6_digit_codes`. The `example3` dataset contains `gvkey`, `fyear`, and `industry code` (`naicsh`) of all observations in `fyear==2016`. The `NAICS_2_6_digit_codes` dataset contains the `NAICS` code and industry description for more than 2,200 industries (from the 2 to the 6 digit level). You want to merge the two datasets, so that each observation will have the following variables: `gvkey`, `fyear`, `naicsh`, and `NAICS_description`. This will attempt to add the industry description to every observation in the `example3` dataset.

To perform this merge, enter the following code into the Console:
```R
merged3 <- left_join(example3, NAICS_2_6_digit_codes, by = c("naicsh" = "NAICS"))
```
Here’s what you should see as a result:
```R
Joining, by = "NAICS"
``` 

<?!>## Conclusion
Merging datasets is an essential task in data analysis. In this lesson, we covered two kinds of methods to merge datasets, `inner_join()` and `left_join()`. We also discussed the importance of matching variable names and types when merging datasets. Finally, we demonstrated how to perform a basic merge using `left_join()` and how to handle non-one-to-one matching.
