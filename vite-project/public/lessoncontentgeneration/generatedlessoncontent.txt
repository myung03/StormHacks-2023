## Introduction

In this lecture, we will continue our discussion on merging datasets using R programming language. Merging datasets is a crucial task in data analysis, as it allows us to combine information from different sources into a single dataset for further analysis. In this lecture, we will cover two types of methods to merge datasets: `inner_join()` and `left_join()`. 

<?!>## Inner_join() Function

The `inner_join()` function returns all rows from both datasets where there is a match based on the specified attribute(s). To demonstrate how to use `inner_join()`, let's use the same example1 and example2 datasets from our previous lecture.

Suppose we want to merge these two datasets based on the `gvkey` and `fyear` attributes. To do this, enter the following code into the Console:

```R
merged1 <- inner_join(example1, example2, by = c("gvkey", "fyear"))
```

In the above code, we specify that we want to merge the `example1` and `example2` datasets based on the `gvkey` and `fyear` attributes using `inner_join()`. The resulting `merged1` dataset will contain all rows where there is a match based on the specified attributes.

<?!>## Left_join() Function

The `left_join()` function returns all rows from the left dataset and all columns from both datasets where there is a match based on the specified attribute(s). 

Suppose we want to improve the `example1` dataset by bringing in as much information from the `example2` dataset as possible. To do this, we can use `left_join()` as it is suitable for this task. Enter the following code into the Console:

```R
merged2 <- left_join(example1, example2)
```

In the above code, we specify that we want to merge the `example1` and `example2` datasets based on their common attributes using `left_join()`. The resulting `merged2` dataset will contain all rows from the `example1` dataset and additional columns from the `example2` dataset where there is a match based on the specified attributes.

<?!>## Non-One-To-One Matching

When you merge two datasets whose key variable(s) uniquely identify each observation within the dataset, this kind of merge is called a one-to-one merge. However, the attribute(s) used as a basis of matching the observations in two datasets do not have to be key variables for both datasets. In such situations, an observation in one dataset can match with multiple observations in the other dataset through non-one-to-one matching. 

To demonstrate non-one-to-one matching, suppose we have two datasets: `example3` and `NAICS_2_6_digit_codes`. `example3` contains `gvkey`, `fyear`, and `industry code (naicsh)` of all observations in `fyear==2016`. `NAICS_2_6_digit_codes` contains the NAICS code and industry description for more than 2,200 industries (from the 2 to the 6 digit level). 

Suppose we want to merge the two datasets, so that each observation will have the following variables: `gvkey`, `fyear`, `naicsh`, and `NAICS_description`. To do this, we can use `left_join()` and enter the following code into the Console:

```R
merged3 <- left_join(example3, NAICS_2_6_digit_codes, by = c("naicsh" = "NAICS"))
```

In the above code, we specify that we want to merge the `example3` and `NAICS_2_6_digit_codes` datasets based on their common attributes using `left_join()`. The resulting `merged3` dataset will contain all rows from the `example3` dataset and additional columns from the `NAICS_2_6_digit_codes` dataset where there is a match based on the specified attributes.

<?!>## Conclusion

Merging datasets is a crucial task in data analysis, and R provides us with various functions to merge datasets based on matching attributes. In this lecture, we covered two types of methods to merge datasets: `inner_join()` and `left_join()`. We also discussed non-one-to-one matching and how to merge datasets in such situations. With these tools, we can efficiently combine information from different sources into a single dataset for further analysis.
